#!/usr/bin/env python3

import sys
import os
import platform
import subprocess
import datetime
import webbrowser
import time
import tempfile
import argparse

# VL-Trades Script Version 1.0.0 - Open specific VolumeLeaders trade URLs in positioned browser windows

def print_usage():
    """Print usage instructions."""
    print("Usage: vl-trades")
    print("Opens VolumeLeaders trade analysis URLs in positioned browser windows:")
    print("  - Bull ETF Dark Pools")
    print("  - Major ETFs Dark Pools + Sweeps") 
    print("  - Bear ETF Dark Pools")
    print("  - VolumeLeaders Welcome Page")
    sys.exit(1)

def get_current_date():
    """Get current date in YYYY-MM-DD format."""
    return datetime.date.today().strftime("%Y-%m-%d")

def main():
    """Main function."""
    # Parse arguments
    parser = argparse.ArgumentParser(description='Open VolumeLeaders trade analysis URLs')
    
    # If help requested, show usage
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print_usage()
    
    # Get current date
    current_date = get_current_date()
    print(f"Opening VolumeLeaders trade analysis for date: {current_date}")
    
    # Define the URLs
    # Bull ETF Dark Pools (high VCD)
    url1 = f"https://www.volumeleaders.com/Trades?Tickers=&SectorIndustry=X%20Bull&StartDate={current_date}&EndDate={current_date}&MinVolume=10000&MaxVolume=2000000000&Conditions=0&VCD=97.00&RelativeSize=0&DarkPools=1&Sweeps=-1&LatePrints=-1&SignaturePrints=-1&EvenShared=-1&SecurityTypeKey=-1&MinPrice=0.00&MaxPrice=100000.00&MinDollars=500000.00&MaxDollars=10000000000.00&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1&PresetSearchTemplateID=0&PageSize=-1"
    
    # Major ETFs Dark Pools + Sweeps
    url2 = f"https://www.volumeleaders.com/Trades?Tickers=IWM,QQQ,SOXL,SPY,TNA,TQQQ,YINN,UVIX,BITX,SPYU,ETHU&SectorIndustry=&StartDate={current_date}&EndDate={current_date}&MinVolume=0&MaxVolume=2000000000&Conditions=0&VCD=0.00&RelativeSize=0&DarkPools=1&Sweeps=1&LatePrints=-1&SignaturePrints=-1&EvenShared=-1&SecurityTypeKey=-1&MinPrice=0.00&MaxPrice=100000.00&MinDollars=500000.00&MaxDollars=300000000000.00&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1&PresetSearchTemplateID=0&PageSize=-1"
    
    # Bear ETF Dark Pools (high VCD)  
    url3 = f"https://www.volumeleaders.com/Trades?Tickers=&SectorIndustry=X%20Bear&StartDate={current_date}&EndDate={current_date}&MinVolume=10000&MaxVolume=2000000000&Conditions=0&VCD=97.00&RelativeSize=0&DarkPools=1&Sweeps=-1&LatePrints=-1&SignaturePrints=-1&EvenShared=-1&SecurityTypeKey=-1&MinPrice=0.00&MaxPrice=100000.00&MinDollars=500000.00&MaxDollars=10000000000.00&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1&PresetSearchTemplateID=0&PageSize=-1"
    
    # VolumeLeaders Welcome page
    url4 = "https://www.volumeleaders.com/Welcome"
    
    # Detect operating system
    system = platform.system()
    
    if system == "Darwin":  # macOS
        print("Detected macOS - Using AppleScript for window positioning")
        open_urls_macos(url1, url2, url3, url4)
    else:  # Linux or other
        print(f"Detected {system} - Opening URLs in default browser")
        open_urls_default(url1, url2, url3, url4)

def get_screen_dimensions_macos():
    """Get screen dimensions on macOS using multiple methods."""
    
    # Method 1: Try AppleScript with Finder (gets logical/scaled resolution)
    applescript_finder = '''
    tell application "Finder"
        set _bounds to bounds of window of desktop
        set screenWidth to item 3 of _bounds
        set screenHeight to item 4 of _bounds
        return (screenWidth as string) & "," & (screenHeight as string)
    end tell
    '''
    
    try:
        result = subprocess.run(["osascript", "-e", applescript_finder], capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            output = result.stdout.strip()
            # Clean up any extra commas or spaces
            output = output.replace(" ", "").replace(",,", ",")
            dimensions = output.split(',')
            if len(dimensions) >= 2 and dimensions[0] and dimensions[1]:
                screen_width = int(float(dimensions[0]))
                screen_height = int(float(dimensions[1]))
                print(f"Screen dimensions detected via AppleScript (Finder - logical resolution): {screen_width}x{screen_height}")
                
                # Check if this looks like a multi-display setup
                if screen_width > 4000:  # Likely multiple displays
                    # For dual display setup, assume each display is half the total width
                    main_width = screen_width // 2
                    print(f"Multi-display setup detected, using main display: {main_width}x{screen_height}")
                    return main_width, screen_height
                
                return screen_width, screen_height
    except Exception as e:
        print(f"AppleScript Finder method failed: {e}")
    
    # Fallback resolution
    print("Using fallback resolution: 2560x1440")
    return 2560, 1440

def open_urls_macos(url1, url2, url3, url4):
    """Open URLs on macOS with Chrome and position windows."""
    # Get screen dimensions
    screen_width, screen_height = get_screen_dimensions_macos()
    
    # Calculate half width and height
    half_width = screen_width // 2
    half_height = screen_height // 2
    
    print(f"Detected screen resolution: {screen_width}x{screen_height}")
    print(f"Window dimensions will be: {half_width}x{half_height}")
    
    # Make sure Chrome is running
    subprocess.run(["open", "-a", "Google Chrome"])
    time.sleep(0.5)
    
    # Check for existing VL trade windows
    applescript = '''
    try
        tell application "Google Chrome"
            set vlTradeWindows to {}
            repeat with w in windows
                try
                    set tabCount to count of tabs of w
                    repeat with t from 1 to tabCount
                        set tabURL to URL of tab t of w
                        if tabURL contains "volumeleaders.com/Trades" or tabURL contains "volumeleaders.com/Welcome" then
                            set end of vlTradeWindows to w
                            exit repeat
                        end if
                    end repeat
                on error
                    # Skip if we can't get the URL
                end try
            end repeat
            
            return (count of vlTradeWindows)
        end tell
    on error errMsg
        return 0
    end try
    '''
    
    result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
    try:
        window_count = int(result.stdout.strip())
    except:
        window_count = 0
    
    print(f"Found {window_count} existing VolumeLeaders trade windows")
    
    if window_count >= 1:
        print(f"Reusing {window_count} existing browser windows...")
        
        # Update existing windows
        applescript = f'''
        try
            tell application "Google Chrome"
                set targetWindows to {{}}
                
                # Look for VL trade windows
                repeat with w in windows
                    try
                        set tabCount to count of tabs of w
                        repeat with t from 1 to tabCount
                            set tabURL to URL of tab t of w
                            if tabURL contains "volumeleaders.com/Trades" or tabURL contains "volumeleaders.com/Welcome" then
                                set end of targetWindows to w
                                exit repeat
                            end if
                        end repeat
                    on error
                        # Skip if we can't get the URL
                    end try
                end repeat
                
                # If no VL windows found, use any content windows
                if (count of targetWindows) = 0 then
                    repeat with w in windows
                        set winBounds to bounds of w
                        set winWidth to item 3 of winBounds - item 1 of winBounds
                        set winHeight to item 4 of winBounds - item 2 of winBounds
                        
                        if winWidth > 200 and winHeight > 200 then
                            set end of targetWindows to w
                        end if
                    end repeat
                end if
                
                # Use only the first 4 windows
                if (count of targetWindows) > 4 then
                    set targetWindows to items 1 through 4 of targetWindows
                end if
                
                # Update windows and position them
                if (count of targetWindows) >= 1 then
                    # Window 1: Top-Left - Bull ETF Dark Pools
                    set w to item 1 of targetWindows
                    set bounds of w to {{0, 23, {half_width}, {half_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url1}"
                end if
                
                if (count of targetWindows) >= 2 then
                    # Window 2: Top-Right - Major ETFs Dark Pools + Sweeps
                    set w to item 2 of targetWindows
                    set bounds of w to {{{half_width}, 23, {screen_width}, {half_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url2}"
                end if
                
                if (count of targetWindows) >= 3 then
                    # Window 3: Bottom-Left - Bear ETF Dark Pools
                    set w to item 3 of targetWindows
                    set bounds of w to {{0, {half_height}, {half_width}, {screen_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url3}"
                end if
                
                if (count of targetWindows) >= 4 then
                    # Window 4: Bottom-Right - VolumeLeaders Welcome
                    set w to item 4 of targetWindows
                    set bounds of w to {{{half_width}, {half_height}, {screen_width}, {screen_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url4}"
                end if
                
                # Create any additional windows we need
                if (count of targetWindows) < 4 then
                    # Create window 2 if needed
                    if (count of targetWindows) < 2 then
                        make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
                        tell active tab of front window to set URL to "{url2}"
                        delay 0.3
                    end if
                    
                    # Create window 3 if needed
                    if (count of targetWindows) < 3 then
                        make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url3}"
                        delay 0.3
                    end if
                    
                    # Create window 4 if needed
                    if (count of targetWindows) < 4 then
                        make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url4}"
                    end if
                end if
            end tell
            return "success"
        on error errMsg
            return "ERROR: " & errMsg
        end try
        '''
        
        result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
        if result.stdout.strip().startswith("ERROR:"):
            print(f"Error updating windows: {result.stdout.strip()}")
        else:
            print("Successfully updated VolumeLeaders trade windows")
    else:
        # No existing windows found, create new ones
        print("Creating new VolumeLeaders trade windows...")
        
        applescript = f'''
        tell application "Google Chrome"
            # Window 1: Top-Left - Bull ETF Dark Pools
            make new window with properties {{bounds:{{0, 23, {half_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url1}"
            delay 0.3
            
            # Window 2: Top-Right - Major ETFs Dark Pools + Sweeps
            make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url2}"
            delay 0.3
            
            # Window 3: Bottom-Left - Bear ETF Dark Pools
            make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url3}"
            delay 0.3
            
            # Window 4: Bottom-Right - VolumeLeaders Welcome
            make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url4}"
        end tell
        '''
        
        subprocess.run(["osascript", "-e", applescript])
        print("Successfully created VolumeLeaders trade windows")

def open_urls_default(url1, url2, url3, url4):
    """Open URLs on other platforms using the default browser."""
    print("Opening URLs in default browser...")
    webbrowser.open(url1)
    time.sleep(1)
    webbrowser.open(url2)
    time.sleep(1)
    webbrowser.open(url3)
    time.sleep(1)
    webbrowser.open(url4)

if __name__ == "__main__":
    main() 