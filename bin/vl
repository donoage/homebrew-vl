#!/usr/bin/env python3

import sys
import os
import platform
import subprocess
import datetime
import webbrowser
import time
import glob

def print_usage():
    """Print usage instructions."""
    print("Usage: vl TICKER")
    print("Example: vl AAPL")
    sys.exit(1)

def main():
    """Main function."""
    # Check if ticker argument is provided
    if len(sys.argv) < 2:
        print_usage()
    
    # Get the ticker from command line argument
    ticker = sys.argv[1].upper()
    print(f"Using ticker: {ticker}")
    
    # Get today's date in YYYY-MM-DD format
    today = datetime.date.today().strftime("%Y-%m-%d")
    print(f"Using today's date: {today}")
    
    # Calculate dates for different timeframes
    three_months_ago = (datetime.date.today() - datetime.timedelta(days=90)).strftime("%Y-%m-%d")
    one_month_ago = (datetime.date.today() - datetime.timedelta(days=30)).strftime("%Y-%m-%d")
    one_week_ago = (datetime.date.today() - datetime.timedelta(days=7)).strftime("%Y-%m-%d")
    
    # Construct URLs with the provided ticker and dates
    url1 = f"https://www.volumeleaders.com/Chart?StartDate={three_months_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    url2 = f"https://www.volumeleaders.com/Chart?StartDate={one_month_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    url3 = f"https://www.volumeleaders.com/Chart?StartDate={one_month_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    url4 = f"https://www.volumeleaders.com/Chart?StartDate={one_week_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    # Detect operating system
    system = platform.system()
    
    # Check if running in WSL
    is_wsl = False
    is_parallels_wsl = False
    if system == "Linux":
        try:
            with open('/proc/version', 'r') as f:
                version_info = f.read().lower()
                if 'microsoft' in version_info:
                    is_wsl = True
                    print("Detected Windows Subsystem for Linux (WSL)")
                    
                    # Check if running in Parallels
                    if os.path.exists('/mnt/c/Program Files/Parallels'):
                        is_parallels_wsl = True
                        print("Detected Parallels WSL environment")
        except:
            pass
    
    if system == "Darwin":  # macOS
        print("Detected macOS - Using AppleScript for window positioning")
        open_urls_macos(url1, url2, url3, url4)
    elif system == "Windows" or is_wsl:  # Windows or WSL
        if is_wsl:
            if is_parallels_wsl:
                print("Using Parallels WSL-specific browser opening method")
                open_urls_parallels_wsl(url1, url2, url3, url4)
            else:
                print("Using WSL-specific browser opening method")
                open_urls_wsl(url1, url2, url3, url4)
        else:
            print("Detected Windows - Opening URLs in default browser")
            open_urls_windows(url1, url2, url3, url4)
    else:  # Linux or other
        print(f"Detected {system} - Opening URLs in default browser")
        open_urls_default(url1, url2, url3, url4)

def get_screen_dimensions_macos():
    """Get screen dimensions on macOS using AppleScript."""
    applescript = '''
    tell application "Finder"
        set _bounds to bounds of window of desktop
        set screenWidth to item 3 of _bounds
        set screenHeight to item 4 of _bounds
        return screenWidth & "," & screenHeight
    end tell
    '''
    
    try:
        result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
        if result.stdout.strip():
            dimensions = result.stdout.strip().split(',')
            if len(dimensions) == 2:
                screen_width = int(float(dimensions[0]))
                screen_height = int(float(dimensions[1]))
                return screen_width, screen_height
        
        # If we got here, try an alternative method
        applescript_alt = '''
        tell application "System Events"
            set _display to first display
            return (value of _display's width) & "," & (value of _display's height)
        end tell
        '''
        
        result = subprocess.run(["osascript", "-e", applescript_alt], capture_output=True, text=True)
        if result.stdout.strip():
            dimensions = result.stdout.strip().split(',')
            if len(dimensions) == 2:
                screen_width = int(float(dimensions[0]))
                screen_height = int(float(dimensions[1]))
                return screen_width, screen_height
                
        # If we still don't have dimensions, fallback to defaults
        return 2880, 1600
    except Exception as e:
        print(f"Error getting screen dimensions: {e}")
        # Fallback to default values
        return 2880, 1600

def open_urls_macos(url1, url2, url3, url4):
    """Open URLs on macOS with Chrome and position windows."""
    # Get screen dimensions
    screen_width, screen_height = get_screen_dimensions_macos()
    
    # Calculate half width and height
    half_width = screen_width // 2
    half_height = screen_height // 2
    
    print(f"Detected screen resolution: {screen_width}x{screen_height}")
    print(f"Window dimensions will be: {half_width}x{half_height}")
    
    # Make sure Chrome is running
    subprocess.run(["open", "-a", "Google Chrome"])
    time.sleep(1)
    
    # Check if VolumeLeaders windows already exist
    applescript = '''
    try
        tell application "Google Chrome"
            set vlWindows to {}
            repeat with w in windows
                try
                    set winURL to URL of active tab of w
                    if winURL contains "volumeleaders.com/Chart" then
                        set end of vlWindows to w
                    end if
                on error
                    # Skip if we can't get the URL
                end try
            end repeat
            return (count of vlWindows)
        end tell
    on error
        return 0
    end try
    '''
    
    result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
    window_count = int(result.stdout.strip() or "0")
    
    if window_count >= 1:
        print(f"Found {window_count} existing VolumeLeaders windows. Updating them...")
        
        # Update existing windows
        applescript = f'''
        try
            tell application "Google Chrome"
                # Find all VolumeLeaders windows
                set vlWindows to {{}}
                repeat with w in windows
                    try
                        set winURL to URL of active tab of w
                        if winURL contains "volumeleaders.com/Chart" then
                            set end of vlWindows to w
                        end if
                    on error
                        # Skip if we can't get the URL
                    end try
                end repeat
                
                # Update VolumeLeaders windows, up to 4
                set windowCount to count of vlWindows
                
                # If we have at least 1 window, update it and position as window 1
                if windowCount >= 1 then
                    set w to item 1 of vlWindows
                    set bounds of w to {{0, 23, {half_width}, {half_height}}}
                    tell active tab of w to set URL to "{url1}"
                end if
                
                # If we have at least 2 windows, update the 2nd one
                if windowCount >= 2 then
                    set w to item 2 of vlWindows
                    set bounds of w to {{{half_width}, 23, {screen_width}, {half_height}}}
                    tell active tab of w to set URL to "{url2}"
                end if
                
                # If we have at least 3 windows, update the 3rd one
                if windowCount >= 3 then
                    set w to item 3 of vlWindows
                    set bounds of w to {{0, {half_height}, {half_width}, {screen_height}}}
                    tell active tab of w to set URL to "{url3}"
                end if
                
                # If we have at least 4 windows, update the 4th one
                if windowCount >= 4 then
                    set w to item 4 of vlWindows
                    set bounds of w to {{{half_width}, {half_height}, {screen_width}, {screen_height}}}
                    tell active tab of w to set URL to "{url4}"
                end if
                
                # Create any additional windows we need (if we found fewer than 4)
                if windowCount < 4 then
                    # Create window 2 if needed
                    if windowCount < 2 then
                        make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
                        tell active tab of front window to set URL to "{url2}"
                        delay 0.5
                    end if
                    
                    # Create window 3 if needed
                    if windowCount < 3 then
                        make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url3}"
                        delay 0.5
                    end if
                    
                    # Create window 4 if needed
                    if windowCount < 4 then
                        make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url4}"
                    end if
                end if
            end tell
        on error errMsg
            return "ERROR: " & errMsg
        end try
        '''
        
        subprocess.run(["osascript", "-e", applescript])
        print(f"Updated chart windows for {sys.argv[1].upper()}")
    else:
        # No existing windows found, create new ones
        print(f"Creating new chart windows for {sys.argv[1].upper()}...")
        
        applescript = f'''
        tell application "Google Chrome"
            # Window 1: Top-Left - 3 month chart
            make new window with properties {{bounds:{{0, 23, {half_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url1}"
            delay 0.5
            
            # Window 2: Top-Right - 1 month chart with dark pools and sweeps
            make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url2}"
            delay 0.5
            
            # Window 3: Bottom-Left - 1 month chart
            make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url3}"
            delay 0.5
            
            # Window 4: Bottom-Right - 1 week chart with dark pools and sweeps
            make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url4}"
        end tell
        '''
        
        subprocess.run(["osascript", "-e", applescript])
        print(f"Successfully created chart windows for {sys.argv[1].upper()}")

def open_urls_parallels_wsl(url1, url2, url3, url4):
    """Open URLs when running in Parallels WSL environment."""
    try:
        print("Opening URLs in Windows browser under Parallels...")
        
        # Try to find Chrome in common Parallels Windows locations
        chrome_paths = [
            '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe',
            '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',
            '/mnt/c/Users/*/AppData/Local/Google/Chrome/Application/chrome.exe',  # Wildcard path
            # Add more potential paths if needed
        ]
        
        browser_path = None
        browser_name = "Chrome"
        
        # First check exact paths for Chrome
        for path in chrome_paths:
            if '*' not in path and os.path.exists(path):
                browser_path = path
                print(f"Found Chrome at: {browser_path}")
                break
        
        # If not found, try expanding wildcards for Chrome
        if not browser_path:
            for path in chrome_paths:
                if '*' in path:
                    # Try to expand wildcard paths
                    matching_paths = glob.glob(path)
                    if matching_paths:
                        browser_path = matching_paths[0]
                        print(f"Found Chrome at: {browser_path}")
                        break
                        
        # If Chrome not found, try Microsoft Edge
        if not browser_path:
            print("Chrome not found. Looking for Microsoft Edge...")
            edge_paths = [
                '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe',
                '/mnt/c/Program Files/Microsoft/Edge/Application/msedge.exe',
                # Add more potential paths if needed
            ]
            
            for path in edge_paths:
                if os.path.exists(path):
                    browser_path = path
                    browser_name = "Edge"
                    print(f"Found Microsoft Edge at: {browser_path}")
                    break
        
        if browser_path:
            # Use Windows browser directly - open all windows first without waiting
            print(f"Launching {browser_name} windows...")
            
            # Start all browser processes without waiting
            processes = []
            processes.append(subprocess.Popen([browser_path, url1]))
            processes.append(subprocess.Popen([browser_path, url2]))
            processes.append(subprocess.Popen([browser_path, url3]))
            processes.append(subprocess.Popen([browser_path, url4]))
            
            # Give them a moment to start
            time.sleep(3)
            
            # Try to position windows using PowerShell
            try:
                print("Positioning windows...")
                ps_script = f'''
                Add-Type -AssemblyName System.Windows.Forms
                $screen = [System.Windows.Forms.Screen]::PrimaryScreen
                $screenWidth = $screen.Bounds.Width
                $screenHeight = $screen.Bounds.Height
                
                # Calculate half dimensions
                $halfWidth = $screenWidth / 2
                $halfHeight = $screenHeight / 2
                
                # Get all browser windows
                $shell = New-Object -ComObject Shell.Application
                $windows = @($shell.Windows())
                
                # Filter for browser windows with our URLs
                $ourWindows = $windows | Where-Object {{ 
                    $url = $_.LocationURL
                    $url -like "*volumeleaders.com/Chart*" 
                }}
                
                Write-Host "Found $($ourWindows.Count) browser windows to position"
                
                # Position windows in grid
                $positions = @(
                    @(0, 0, $halfWidth, $halfHeight),
                    @($halfWidth, 0, $screenWidth, $halfHeight),
                    @(0, $halfHeight, $halfWidth, $screenHeight),
                    @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
                )
                
                $i = 0
                foreach ($window in $ourWindows) {{
                    if ($i -lt 4) {{
                        $pos = $positions[$i]
                        $window.Left = $pos[0]
                        $window.Top = $pos[1]
                        $window.Width = $pos[2] - $pos[0]
                        $window.Height = $pos[3] - $pos[1]
                        Write-Host "Positioned window $i"
                        $i++
                    }}
                }}
                '''
                
                # Save and run PowerShell script
                ps_path = '/tmp/position_windows.ps1'
                with open(ps_path, 'w') as f:
                    f.write(ps_script)
                    
                subprocess.run(['cd /mnt/c && powershell.exe -ExecutionPolicy Bypass -File /mnt/c/Windows/Temp/position_windows.ps1'], shell=True)
            except Exception as e:
                print(f"Window positioning failed: {e}")
                
            return
            
        # If no browser found, try with PowerShell instead of cmd.exe
        print("No browser found, trying with PowerShell and default browser...")
        
        # Use PowerShell from C drive to avoid UNC path issues
        ps_commands = [
            f'Start-Process "{url1}"',
            f'Start-Process "{url2}"',
            f'Start-Process "{url3}"',
            f'Start-Process "{url4}"'
        ]
        
        # Change to C: drive first to avoid UNC path issues
        for cmd in ps_commands:
            try:
                # Run PowerShell with a CD command first to avoid UNC path issues
                full_cmd = f"cd /mnt/c && powershell.exe -Command \"{cmd}\""
                print(f"Running: {full_cmd}")
                subprocess.run(full_cmd, shell=True)
            except Exception as e:
                print(f"PowerShell command failed: {e}")
        
        # Wait a moment and try to position windows
        time.sleep(3)
        try:
            ps_script = '''
            Add-Type -AssemblyName System.Windows.Forms
            $screen = [System.Windows.Forms.Screen]::PrimaryScreen
            $screenWidth = $screen.Bounds.Width
            $screenHeight = $screen.Bounds.Height
            
            # Calculate half dimensions
            $halfWidth = $screenWidth / 2
            $halfHeight = $screenHeight / 2
            
            # Get all browser windows
            $shell = New-Object -ComObject Shell.Application
            $windows = @($shell.Windows())
            
            # Filter for browser windows with our URLs
            $ourWindows = $windows | Where-Object { 
                $url = $_.LocationURL
                $url -like "*volumeleaders.com/Chart*" 
            }
            
            Write-Host "Found $($ourWindows.Count) browser windows to position"
            
            # Position windows in grid
            $positions = @(
                @(0, 0, $halfWidth, $halfHeight),
                @($halfWidth, 0, $screenWidth, $halfHeight),
                @(0, $halfHeight, $halfWidth, $screenHeight),
                @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
            )
            
            $i = 0
            foreach ($window in $ourWindows) {
                if ($i -lt 4) {
                    $pos = $positions[$i]
                    $window.Left = $pos[0]
                    $window.Top = $pos[1]
                    $window.Width = $pos[2] - $pos[0]
                    $window.Height = $pos[3] - $pos[1]
                    Write-Host "Positioned window $i"
                    $i++
                }
            }
            '''
            
            # Save and run PowerShell script
            ps_path = '/tmp/position_windows.ps1'
            with open(ps_path, 'w') as f:
                f.write(ps_script)
                
            subprocess.run(['cd /mnt/c && powershell.exe -ExecutionPolicy Bypass -File /mnt/c/Windows/Temp/position_windows.ps1'], shell=True)
        except Exception as e:
            print(f"Window positioning failed: {e}")
        
    except Exception as e:
        print(f"Parallels WSL browser opening method failed: {e}")
        print("Trying alternative methods...")
        
        try:
            # Try with explorer.exe as a last resort, with explicit path
            print("Trying explorer.exe with explicit C: drive path...")
            subprocess.run(["cd /mnt/c && explorer.exe", url1], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url2], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url3], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url4], shell=True)
            
        except Exception as e2:
            print(f"Alternative method failed: {e2}")
            print("Please manually open the following URLs in Windows browser:")
            print(f"URL 1: {url1}")
            print(f"URL 2: {url2}")
            print(f"URL 3: {url3}")
            print(f"URL 4: {url4}")

def open_urls_wsl(url1, url2, url3, url4):
    """Open URLs when running in WSL environment."""
    try:
        # Try to find Chrome first
        print("Looking for browsers in Windows...")
        
        # Try to find Chrome in common Windows locations
        chrome_paths = [
            '/mnt/c/Program Files/Google/Chrome/Application/chrome.exe',
            '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',
            '/mnt/c/Users/*/AppData/Local/Google/Chrome/Application/chrome.exe',  # Wildcard path
        ]
        
        browser_path = None
        browser_name = "Chrome"
        
        # Check for Chrome
        for path in chrome_paths:
            if '*' not in path and os.path.exists(path):
                browser_path = path
                print(f"Found Chrome at: {browser_path}")
                break
                
        # Try wildcard paths for Chrome
        if not browser_path:
            for path in chrome_paths:
                if '*' in path:
                    matching_paths = glob.glob(path)
                    if matching_paths:
                        browser_path = matching_paths[0]
                        print(f"Found Chrome at: {browser_path}")
                        break
        
        # If Chrome not found, try Microsoft Edge
        if not browser_path:
            print("Chrome not found. Looking for Microsoft Edge...")
            edge_paths = [
                '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe',
                '/mnt/c/Program Files/Microsoft/Edge/Application/msedge.exe',
            ]
            
            for path in edge_paths:
                if os.path.exists(path):
                    browser_path = path
                    browser_name = "Edge"
                    print(f"Found Microsoft Edge at: {browser_path}")
                    break
                    
        # If a browser was found, use it directly
        if browser_path:
            print(f"Launching {browser_name} windows...")
            
            # Start all browser processes without waiting
            processes = []
            processes.append(subprocess.Popen([browser_path, url1]))
            processes.append(subprocess.Popen([browser_path, url2]))
            processes.append(subprocess.Popen([browser_path, url3]))
            processes.append(subprocess.Popen([browser_path, url4]))
            
            # Give them a moment to start
            time.sleep(3)
            
            # Try to position windows using PowerShell
            try:
                print("Positioning windows...")
                ps_script = f'''
                Add-Type -AssemblyName System.Windows.Forms
                $screen = [System.Windows.Forms.Screen]::PrimaryScreen
                $screenWidth = $screen.Bounds.Width
                $screenHeight = $screen.Bounds.Height
                
                # Calculate half dimensions
                $halfWidth = $screenWidth / 2
                $halfHeight = $screenHeight / 2
                
                # Get all browser windows
                $shell = New-Object -ComObject Shell.Application
                $windows = @($shell.Windows())
                
                # Filter for browser windows with our URLs
                $ourWindows = $windows | Where-Object {{ 
                    $url = $_.LocationURL
                    $url -like "*volumeleaders.com/Chart*" 
                }}
                
                Write-Host "Found $($ourWindows.Count) browser windows to position"
                
                # Position windows in grid
                $positions = @(
                    @(0, 0, $halfWidth, $halfHeight),
                    @($halfWidth, 0, $screenWidth, $halfHeight),
                    @(0, $halfHeight, $halfWidth, $screenHeight),
                    @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
                )
                
                $i = 0
                foreach ($window in $ourWindows) {{
                    if ($i -lt 4) {{
                        $pos = $positions[$i]
                        $window.Left = $pos[0]
                        $window.Top = $pos[1]
                        $window.Width = $pos[2] - $pos[0]
                        $window.Height = $pos[3] - $pos[1]
                        Write-Host "Positioned window $i"
                        $i++
                    }}
                }}
                '''
                
                # Save and run PowerShell script
                ps_path = '/tmp/position_windows.ps1'
                with open(ps_path, 'w') as f:
                    f.write(ps_script)
                    
                subprocess.run(['cd /mnt/c && powershell.exe -ExecutionPolicy Bypass -File /mnt/c/Windows/Temp/position_windows.ps1'], shell=True)
            except Exception as e:
                print(f"Window positioning failed: {e}")
                
            return
            
        # If no browser found, try to use powershell.exe to open URLs in the Windows host's browser
        print("No browser found, trying with PowerShell and default browser...")
        
        # Escape quotes in URLs for PowerShell
        ps_url1 = url1.replace('"', '\\"')
        ps_url2 = url2.replace('"', '\\"')
        ps_url3 = url3.replace('"', '\\"')
        ps_url4 = url4.replace('"', '\\"')
        
        # Change to C: drive first to avoid UNC path issues
        ps_commands = [
            f'Start-Process "{ps_url1}"',
            f'Start-Process "{ps_url2}"',
            f'Start-Process "{ps_url3}"',
            f'Start-Process "{ps_url4}"'
        ]
        
        for cmd in ps_commands:
            try:
                # Run PowerShell with a CD command first to avoid UNC path issues
                full_cmd = f"cd /mnt/c && powershell.exe -Command \"{cmd}\""
                print(f"Running: {full_cmd}")
                subprocess.run(full_cmd, shell=True)
            except Exception as e:
                print(f"PowerShell command failed: {e}")
        
        # Wait a moment and try to position windows
        time.sleep(3)
        try:
            ps_script = '''
            Add-Type -AssemblyName System.Windows.Forms
            $screen = [System.Windows.Forms.Screen]::PrimaryScreen
            $screenWidth = $screen.Bounds.Width
            $screenHeight = $screen.Bounds.Height
            
            # Calculate half dimensions
            $halfWidth = $screenWidth / 2
            $halfHeight = $screenHeight / 2
            
            # Get all browser windows
            $shell = New-Object -ComObject Shell.Application
            $windows = @($shell.Windows())
            
            # Filter for browser windows with our URLs
            $ourWindows = $windows | Where-Object { 
                $url = $_.LocationURL
                $url -like "*volumeleaders.com/Chart*" 
            }
            
            Write-Host "Found $($ourWindows.Count) browser windows to position"
            
            # Position windows in grid
            $positions = @(
                @(0, 0, $halfWidth, $halfHeight),
                @($halfWidth, 0, $screenWidth, $halfHeight),
                @(0, $halfHeight, $halfWidth, $screenHeight),
                @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
            )
            
            $i = 0
            foreach ($window in $ourWindows) {
                if ($i -lt 4) {
                    $pos = $positions[$i]
                    $window.Left = $pos[0]
                    $window.Top = $pos[1]
                    $window.Width = $pos[2] - $pos[0]
                    $window.Height = $pos[3] - $pos[1]
                    Write-Host "Positioned window $i"
                    $i++
                }
            }
            '''
            
            # Save and run PowerShell script
            ps_path = '/tmp/position_windows.ps1'
            with open(ps_path, 'w') as f:
                f.write(ps_script)
                
            subprocess.run(['cd /mnt/c && powershell.exe -ExecutionPolicy Bypass -File /mnt/c/Windows/Temp/position_windows.ps1'], shell=True)
        except Exception as e:
            print(f"Window positioning failed: {e}")
        
    except Exception as e:
        print(f"WSL browser opening method failed: {e}")
        print("Trying alternative method...")
        
        try:
            # Try with explorer.exe as a last resort, with explicit path
            print("Trying explorer.exe with explicit C: drive path...")
            subprocess.run(["cd /mnt/c && explorer.exe", url1], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url2], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url3], shell=True)
            subprocess.run(["cd /mnt/c && explorer.exe", url4], shell=True)
            
        except Exception as e2:
            print(f"Alternative method failed: {e2}")
            print("Please manually open the following URLs:")
            print(f"URL 1: {url1}")
            print(f"URL 2: {url2}")
            print(f"URL 3: {url3}")
            print(f"URL 4: {url4}")

def open_urls_windows(url1, url2, url3, url4):
    """Open URLs on Windows."""
    try:
        # First try to find Chrome
        print("Looking for Chrome installation...")
        chrome_paths = [
            os.path.expandvars("%ProgramFiles%\\Google\\Chrome\\Application\\chrome.exe"),
            os.path.expandvars("%ProgramFiles(x86)%\\Google\\Chrome\\Application\\chrome.exe"),
            os.path.expandvars("%LocalAppData%\\Google\\Chrome\\Application\\chrome.exe"),
            # Add more potential paths if needed
        ]
        
        chrome_path = None
        for path in chrome_paths:
            if os.path.exists(path):
                chrome_path = path
                print(f"Found Chrome at: {chrome_path}")
                break
                
        # If Chrome not found, try to find Edge
        if not chrome_path:
            print("Chrome not found. Looking for Microsoft Edge...")
            edge_paths = [
                os.path.expandvars("%ProgramFiles(x86)%\\Microsoft\\Edge\\Application\\msedge.exe"),
                os.path.expandvars("%ProgramFiles%\\Microsoft\\Edge\\Application\\msedge.exe"),
                # Add more potential paths if needed
            ]
            
            for path in edge_paths:
                if os.path.exists(path):
                    chrome_path = path  # Use edge_path but keep the variable name for code reuse
                    print(f"Found Microsoft Edge at: {chrome_path}")
                    break
        
        if chrome_path:
            # Use Chrome/Edge directly
            browser_name = "Edge" if "edge" in chrome_path.lower() or "msedge" in chrome_path.lower() else "Chrome"
            print(f"Launching {browser_name} windows...")
            
            # Start all browser processes without waiting
            processes = []
            processes.append(subprocess.Popen([chrome_path, url1]))
            processes.append(subprocess.Popen([chrome_path, url2]))
            processes.append(subprocess.Popen([chrome_path, url3]))
            processes.append(subprocess.Popen([chrome_path, url4]))
            
            # Give them a moment to start
            time.sleep(3)
            
            # Try to position windows using PowerShell
            try:
                print("Positioning windows...")
                ps_script = '''
                Add-Type -AssemblyName System.Windows.Forms
                $screen = [System.Windows.Forms.Screen]::PrimaryScreen
                $screenWidth = $screen.Bounds.Width
                $screenHeight = $screen.Bounds.Height
                
                # Calculate half dimensions
                $halfWidth = $screenWidth / 2
                $halfHeight = $screenHeight / 2
                
                # Get all browser windows
                $shell = New-Object -ComObject Shell.Application
                $windows = @($shell.Windows())
                
                # Filter for browser windows with our URLs
                $ourWindows = $windows | Where-Object { 
                    $url = $_.LocationURL
                    $url -like "*volumeleaders.com/Chart*" 
                }
                
                Write-Host "Found $($ourWindows.Count) browser windows to position"
                
                # Position windows in grid
                $positions = @(
                    @(0, 0, $halfWidth, $halfHeight),
                    @($halfWidth, 0, $screenWidth, $halfHeight),
                    @(0, $halfHeight, $halfWidth, $screenHeight),
                    @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
                )
                
                $i = 0
                foreach ($window in $ourWindows) {
                    if ($i -lt 4) {
                        $pos = $positions[$i]
                        $window.Left = $pos[0]
                        $window.Top = $pos[1]
                        $window.Width = $pos[2] - $pos[0]
                        $window.Height = $pos[3] - $pos[1]
                        Write-Host "Positioned window $i"
                        $i++
                    }
                }
                '''
                
                # Save PowerShell script to temp file
                temp_dir = os.environ.get('TEMP', os.environ.get('TMP', ''))
                if not temp_dir:
                    temp_dir = os.getcwd()
                
                ps_path = os.path.join(temp_dir, 'vl_browser_windows.ps1')
                with open(ps_path, 'w') as f:
                    f.write(ps_script)
                
                # Execute PowerShell script
                subprocess.run(['powershell', '-ExecutionPolicy', 'Bypass', '-File', ps_path], check=True)
                
                # Clean up temp file
                try:
                    os.remove(ps_path)
                except:
                    pass
            except Exception as e:
                print(f"Window positioning failed: {e}")
        else:
            print("Neither Chrome nor Edge found. Trying to use default browser...")
            # Try to use the default browser through Windows start command
            os.system(f'start "" "{url1}"')
            os.system(f'start "" "{url2}"')
            os.system(f'start "" "{url3}"')
            os.system(f'start "" "{url4}"')
            
            # Wait a moment and try to position windows
            time.sleep(3)
            try:
                ps_script = '''
                Add-Type -AssemblyName System.Windows.Forms
                $screen = [System.Windows.Forms.Screen]::PrimaryScreen
                $screenWidth = $screen.Bounds.Width
                $screenHeight = $screen.Bounds.Height
                
                # Calculate half dimensions
                $halfWidth = $screenWidth / 2
                $halfHeight = $screenHeight / 2
                
                # Get all browser windows
                $shell = New-Object -ComObject Shell.Application
                $windows = @($shell.Windows())
                
                # Filter for browser windows with our URLs
                $ourWindows = $windows | Where-Object { 
                    $url = $_.LocationURL
                    $url -like "*volumeleaders.com/Chart*" 
                }
                
                Write-Host "Found $($ourWindows.Count) browser windows to position"
                
                # Position windows in grid
                $positions = @(
                    @(0, 0, $halfWidth, $halfHeight),
                    @($halfWidth, 0, $screenWidth, $halfHeight),
                    @(0, $halfHeight, $halfWidth, $screenHeight),
                    @($halfWidth, $halfHeight, $screenWidth, $screenHeight)
                )
                
                $i = 0
                foreach ($window in $ourWindows) {
                    if ($i -lt 4) {
                        $pos = $positions[$i]
                        $window.Left = $pos[0]
                        $window.Top = $pos[1]
                        $window.Width = $pos[2] - $pos[0]
                        $window.Height = $pos[3] - $pos[1]
                        Write-Host "Positioned window $i"
                        $i++
                    }
                }
                '''
                
                # Save PowerShell script to temp file
                temp_dir = os.environ.get('TEMP', os.environ.get('TMP', ''))
                if not temp_dir:
                    temp_dir = os.getcwd()
                
                ps_path = os.path.join(temp_dir, 'vl_browser_windows.ps1')
                with open(ps_path, 'w') as f:
                    f.write(ps_script)
                
                # Execute PowerShell script
                subprocess.run(['powershell', '-ExecutionPolicy', 'Bypass', '-File', ps_path], check=True)
                
                # Clean up temp file
                try:
                    os.remove(ps_path)
                except:
                    pass
            except Exception as e:
                print(f"Window positioning failed: {e}")
            
    except Exception as e:
        print(f"Windows browser opening method failed: {e}")
        print("Falling back to simple browser opening method...")
        
        # Fallback to simple method with webbrowser module
        webbrowser.open(url1)
        webbrowser.open(url2)
        webbrowser.open(url3)
        webbrowser.open(url4)

def open_urls_default(url1, url2, url3, url4):
    """Open URLs on other platforms using the default browser."""
    print("Opening URLs in default browser...")
    webbrowser.open(url1)
    time.sleep(1)
    webbrowser.open(url2)
    time.sleep(1)
    webbrowser.open(url3)
    time.sleep(1)
    webbrowser.open(url4)

if __name__ == "__main__":
    main() 