#!/usr/bin/env python3

import sys
import os
import platform
import subprocess
import datetime
import webbrowser
import time
import tempfile
import argparse

# VL Script Version 3.0.16 - Fix PowerShell execution in WSL to avoid shell misinterpretation
# VL Script Version 3.0.17 - Prevent closing of extra browser windows
# VL Script Version 3.0.18 - Update URL endpoint to Chart0
# VL Script Version 3.0.19 - Increase TradeCount from 5 to 10
# VL Script Version 3.0.20 - Update MinDollars to 18M for DarkPools and Sweeps URLs
# VL Script Version 3.0.21 - Reduce MinDollars to 5M for DarkPools and Sweeps URLs
# VL Script Version 3.0.22 - Set MinDollars to 0 for DarkPools and Sweeps URLs
# VL Script Version 3.0.23 - Change DarkPools to -1 and set MinDollars to 6M for URL2 and URL4
# VL Script Version 3.0.24 - Keep Sweeps=1 while DarkPools=-1 for URL2 and URL4
# VL Script Version 3.0.25 - Add -i flag for index mode (SPY and QQQ charts)
# VL Script Version 3.0.26 - Use 3-day range for index charts
# VL Script Version 3.0.27 - Set MinDollars=0 for all URLs with Sweeps=1
# VL Script Version 3.0.28 - Remove Windows and WSL related code
# VL Script Version 3.0.29 - Use 3 trading days instead of calendar days for index mode
# VL Script Version 3.0.30 - Set TradeCount from 10 to 6 for all URLs
# VL Script Version 3.0.31 - Set TradeCount from 6 to 5 for all URLs
# Note: This accounts for weekends by skipping Saturday and Sunday. For example, if today is Monday,
# 3 trading days ago would be the previous Wednesday (skipping the weekend).

def print_usage():
    """Print usage instructions."""
    print("Usage: vl TICKER")
    print("       vl -i    (Index mode: SPY and QQQ charts)")
    print("Example: vl AAPL")
    sys.exit(1)

def is_trading_day(date):
    """Check if a date is a trading day (Monday-Friday, no holidays)."""
    # Check if it's a weekend
    if date.weekday() >= 5:  # 5=Saturday, 6=Sunday
        return False
    
    # For simplicity, we're not checking holidays
    # A full implementation would need to check US market holidays
    return True

def get_previous_trading_days(days_count):
    """Get the date for N trading days ago."""
    today = datetime.date.today()
    days_found = 0
    days_back = 0
    
    while days_found < days_count:
        days_back += 1
        check_date = today - datetime.timedelta(days=days_back)
        if is_trading_day(check_date):
            days_found += 1
    
    return check_date.strftime("%Y-%m-%d")

def main():
    """Main function."""
    # Parse arguments
    parser = argparse.ArgumentParser(description='View stock volume leaders charts')
    parser.add_argument('-i', '--index', action='store_true', help='Index mode: show SPY and QQQ charts')
    parser.add_argument('ticker', nargs='?', help='Ticker symbol')
    
    # If no arguments or only -h/--help, show usage
    if len(sys.argv) == 1:
        print_usage()
        
    args = parser.parse_args()
    
    # Get today's date in YYYY-MM-DD format
    today = datetime.date.today().strftime("%Y-%m-%d")
    print(f"Using today's date: {today}")
    
    # Calculate dates for different timeframes
    three_months_ago = (datetime.date.today() - datetime.timedelta(days=90)).strftime("%Y-%m-%d")
    one_month_ago = (datetime.date.today() - datetime.timedelta(days=30)).strftime("%Y-%m-%d")
    one_week_ago = (datetime.date.today() - datetime.timedelta(days=7)).strftime("%Y-%m-%d")
    
    # Check if we're in index mode
    if args.index:
        # Get date for 3 trading days ago (accounting for weekends)
        three_trading_days_ago = get_previous_trading_days(3)
        print(f"Index mode: Displaying SPY and QQQ charts with 3 trading days range (since {three_trading_days_ago})")
        
        # URLs for SPY (3 trading days range)
        url1 = f"https://www.volumeleaders.com/Chart0?StartDate={three_trading_days_ago}&EndDate={today}&Ticker=SPY&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        url2 = f"https://www.volumeleaders.com/Chart0?StartDate={three_trading_days_ago}&EndDate={today}&Ticker=SPY&MinVolume=0&MaxVolume=2000000000&MinDollars=0&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        # URLs for QQQ (3 trading days range)
        url3 = f"https://www.volumeleaders.com/Chart0?StartDate={three_trading_days_ago}&EndDate={today}&Ticker=QQQ&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        url4 = f"https://www.volumeleaders.com/Chart0?StartDate={three_trading_days_ago}&EndDate={today}&Ticker=QQQ&MinVolume=0&MaxVolume=2000000000&MinDollars=0&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    else:
        # Regular mode with user-specified ticker
        if not args.ticker:
            print_usage()
        
        # Get the ticker from command line argument
        ticker = args.ticker.upper()
        print(f"Using ticker: {ticker}")
        
        # Construct URLs with the provided ticker and dates
        url1 = f"https://www.volumeleaders.com/Chart0?StartDate={three_months_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        url2 = f"https://www.volumeleaders.com/Chart0?StartDate={one_month_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=0&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        url3 = f"https://www.volumeleaders.com/Chart0?StartDate={one_month_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=500000&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=-1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
        
        url4 = f"https://www.volumeleaders.com/Chart0?StartDate={one_week_ago}&EndDate={today}&Ticker={ticker}&MinVolume=0&MaxVolume=2000000000&MinDollars=0&MaxDollars=300000000000&MinPrice=0&MaxPrice=100000&DarkPools=-1&Sweeps=1&LatePrints=-1&SignaturePrints=0&VolumeProfile=0&Levels=5&TradeCount=5&VCD=0&TradeRank=-1&IncludePremarket=1&IncludeRTH=1&IncludeAH=1&IncludeOpening=1&IncludeClosing=1&IncludePhantom=1&IncludeOffsetting=1"
    
    # Detect operating system
    system = platform.system()
    
    if system == "Darwin":  # macOS
        print("Detected macOS - Using AppleScript for window positioning")
        open_urls_macos(url1, url2, url3, url4)
    else:  # Linux or other
        print(f"Detected {system} - Opening URLs in default browser")
        open_urls_default(url1, url2, url3, url4)

def get_screen_dimensions_macos():
    """Get screen dimensions on macOS using AppleScript."""
    applescript = '''
    tell application "Finder"
        set _bounds to bounds of window of desktop
        set screenWidth to item 3 of _bounds
        set screenHeight to item 4 of _bounds
        return screenWidth & "," & screenHeight
    end tell
    '''
    
    try:
        result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
        if result.stdout.strip():
            dimensions = result.stdout.strip().split(',')
            if len(dimensions) == 2:
                screen_width = int(float(dimensions[0]))
                screen_height = int(float(dimensions[1]))
                return screen_width, screen_height
        
        # If we got here, try an alternative method
        applescript_alt = '''
        tell application "System Events"
            set _display to first display
            return (value of _display's width) & "," & (value of _display's height)
        end tell
        '''
        
        result = subprocess.run(["osascript", "-e", applescript_alt], capture_output=True, text=True)
        if result.stdout.strip():
            dimensions = result.stdout.strip().split(',')
            if len(dimensions) == 2:
                screen_width = int(float(dimensions[0]))
                screen_height = int(float(dimensions[1]))
                return screen_width, screen_height
                
        # If we still don't have dimensions, fallback to defaults
        return 2880, 1600
    except Exception as e:
        print(f"Error getting screen dimensions: {e}")
        # Fallback to default values
        return 2880, 1600

def open_urls_macos(url1, url2, url3, url4):
    """Open URLs on macOS with Chrome and position windows."""
    # Get screen dimensions
    screen_width, screen_height = get_screen_dimensions_macos()
    
    # Calculate half width and height
    half_width = screen_width // 2
    half_height = screen_height // 2
    
    print(f"Detected screen resolution: {screen_width}x{screen_height}")
    print(f"Window dimensions will be: {half_width}x{half_height}")
    
    # Make sure Chrome is running
    subprocess.run(["open", "-a", "Google Chrome"])
    time.sleep(0.5)
    
    # Enhanced method to check for browser windows
    # This will find ALL Chrome windows, not just ones with volumeleaders in the title
    applescript = '''
    try
        tell application "Google Chrome"
            set windowCount to count of windows
            
            # First try to find any VolumeLeaders windows
            set vlWindows to {}
            repeat with w in windows
                try
                    set tabCount to count of tabs of w
                    repeat with t from 1 to tabCount
                        set tabURL to URL of tab t of w
                        if tabURL contains "volumeleaders.com/Chart" then
                            set end of vlWindows to w
                            exit repeat
                        end if
                    end repeat
                on error
                    # Skip if we can't get the URL
                end try
            end repeat
            
            # If we found VolumeLeaders windows, return those count
            if (count of vlWindows) > 0 then
                return "volumeleaders:" & (count of vlWindows)
            end if
            
            # If not, just return the count of all windows with actual content
            set contentWindows to {}
            repeat with w in windows
                # Only consider windows that aren't tiny
                set winBounds to bounds of w
                set winWidth to item 3 of winBounds - item 1 of winBounds
                set winHeight to item 4 of winBounds - item 2 of winBounds
                
                if winWidth > 200 and winHeight > 200 then
                    set end of contentWindows to w
                end if
            end repeat
            
            return "any:" & (count of contentWindows)
        end tell
    on error errMsg
        return "error:" & errMsg
    end try
    '''
    
    result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
    window_info = result.stdout.strip()
    
    window_count = 0
    window_type = "none"
    
    if window_info.startswith("volumeleaders:"):
        window_count = int(window_info.split(":")[1])
        window_type = "volumeleaders"
    elif window_info.startswith("any:"):
        window_count = int(window_info.split(":")[1])
        window_type = "any"
    elif window_info.startswith("error:"):
        print(f"Error checking for windows: {window_info}")
    
    print(f"Found {window_count} browser windows of type '{window_type}'")
    
    if window_count >= 1:
        print(f"Reusing {window_count} existing browser windows...")
        
        # Update existing windows
        applescript = f'''
        try
            tell application "Google Chrome"
                # Get the actual windows we'll be using
                set targetWindows to {{}}
                
                # First try to look for volumeleaders windows
                set vlWindows to {{}}
                repeat with w in windows
                    try
                        set tabCount to count of tabs of w
                        repeat with t from 1 to tabCount
                            set tabURL to URL of tab t of w
                            if tabURL contains "volumeleaders.com/Chart" then
                                set end of vlWindows to w
                                exit repeat
                            end if
                        end repeat
                    on error
                        # Skip if we can't get the URL
                    end try
                end repeat
                
                # If we found VolumeLeaders windows, use those first
                if (count of vlWindows) > 0 then
                    set targetWindows to vlWindows
                else
                    # Otherwise, just use any content windows
                    repeat with w in windows
                        # Only consider windows that aren't tiny
                        set winBounds to bounds of w
                        set winWidth to item 3 of winBounds - item 1 of winBounds
                        set winHeight to item 4 of winBounds - item 2 of winBounds
                        
                        if winWidth > 200 and winHeight > 200 then
                            set end of targetWindows to w
                        end if
                    end repeat
                end if
                
                # MODIFIED: Don't close excess windows, just use the first 4
                if (count of targetWindows) > 4 then
                    log "Found " & (count of targetWindows) & " windows, using first 4 only..."
                    # Don't close extra windows
                    # repeat with i from 5 to (count of targetWindows)
                    #     close window i
                    # end repeat
                    # Now we only use the first 4 windows
                    set targetWindows to items 1 through 4 of targetWindows
                end if
                
                # Log how many windows we're working with
                log "Using " & (count of targetWindows) & " windows"
                
                # Update windows and position them
                if (count of targetWindows) >= 1 then
                    # Window 1: Top-Left
                    set w to item 1 of targetWindows
                    set bounds of w to {{0, 23, {half_width}, {half_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url1}"
                end if
                
                if (count of targetWindows) >= 2 then
                    # Window 2: Top-Right
                    set w to item 2 of targetWindows
                    set bounds of w to {{{half_width}, 23, {screen_width}, {half_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url2}"
                end if
                
                if (count of targetWindows) >= 3 then
                    # Window 3: Bottom-Left
                    set w to item 3 of targetWindows
                    set bounds of w to {{0, {half_height}, {half_width}, {screen_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url3}"
                end if
                
                if (count of targetWindows) >= 4 then
                    # Window 4: Bottom-Right
                    set w to item 4 of targetWindows
                    set bounds of w to {{{half_width}, {half_height}, {screen_width}, {screen_height}}}
                    set active tab index of w to 1
                    tell active tab of w to set URL to "{url4}"
                end if
                
                # Create any additional windows we need (if we found fewer than 4)
                if (count of targetWindows) < 4 then
                    # Create window 2 if needed
                    if (count of targetWindows) < 2 then
                        make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
                        tell active tab of front window to set URL to "{url2}"
                        delay 0.3
                    end if
                    
                    # Create window 3 if needed
                    if (count of targetWindows) < 3 then
                        make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url3}"
                        delay 0.3
                    end if
                    
                    # Create window 4 if needed
                    if (count of targetWindows) < 4 then
                        make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
                        tell active tab of front window to set URL to "{url4}"
                    end if
                end if
            end tell
            return "success"
        on error errMsg
            return "ERROR: " & errMsg
        end try
        '''
        
        result = subprocess.run(["osascript", "-e", applescript], capture_output=True, text=True)
        if result.stdout.strip().startswith("ERROR:"):
            print(f"Error updating windows: {result.stdout.strip()}")
        else:
            print(f"Successfully updated chart windows for {sys.argv[1].upper()}")
    else:
        # No existing windows found, create new ones
        print(f"Creating new chart windows for {sys.argv[1].upper()}...")
        
        applescript = f'''
        tell application "Google Chrome"
            # Window 1: Top-Left - 3 month chart
            make new window with properties {{bounds:{{0, 23, {half_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url1}"
            delay 0.3
            
            # Window 2: Top-Right - 1 month chart with dark pools and sweeps
            make new window with properties {{bounds:{{{half_width}, 23, {screen_width}, {half_height}}}}}
            tell active tab of front window to set URL to "{url2}"
            delay 0.3
            
            # Window 3: Bottom-Left - 1 month chart
            make new window with properties {{bounds:{{0, {half_height}, {half_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url3}"
            delay 0.3
            
            # Window 4: Bottom-Right - 1 week chart with dark pools and sweeps
            make new window with properties {{bounds:{{{half_width}, {half_height}, {screen_width}, {screen_height}}}}}
            tell active tab of front window to set URL to "{url4}"
        end tell
        '''
        
        subprocess.run(["osascript", "-e", applescript])
        print(f"Successfully created chart windows for {sys.argv[1].upper()}")

def open_urls_default(url1, url2, url3, url4):
    """Open URLs on other platforms using the default browser."""
    print("Opening URLs in default browser...")
    webbrowser.open(url1)
    time.sleep(1)
    webbrowser.open(url2)
    time.sleep(1)
    webbrowser.open(url3)
    time.sleep(1)
    webbrowser.open(url4)

if __name__ == "__main__":
    main() 